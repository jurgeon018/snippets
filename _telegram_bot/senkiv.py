from flask import Flask
from flask import request
#from flask import jsonify
import time
import re
import requests
import json
import telegram

# TOKEN = '791986674:AAECftWKFlQ3baeDQ5xL_WDY-uq4v0x_fWY'
TOKEN = '731296971:AAEmJjfLxvhjyAFy-RScvk9kOtf8MKlD_7c'

bot = telegram.Bot(token=TOKEN)

URL = 'https://api.telegram.org/bot' + TOKEN

list_in = str
glob_value = str
num = str
valin = str
valfrom = str
mes_list = []

#from flask_sslify import SSLify

app = Flask(__name__)


#sslify = SSLify(app)

# –ó–∞–ø–∏—Å –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—è –≤ json :
def write_json(data, filename='answer.json'):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)


# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º:
def send_message(chat_id, text='bla bla'):
    url = URL + 'sendMessage'
    answer = {'chat_id': chat_id, 'text': text}
    r = requests.post(url, json=answer)
    return r.json()


def today_date():
    d = time.strftime("%Y%m%d")
    return d


# –ü–∞—Ä—Å–∏–º–æ –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
def parse_text(text):
    try:
        pattern = r'\d+'
        parse = re.findall(pattern, text)
        global num
        num = parse[0]
    except:
        pattern2 = r'\D\w+'
        parse2 = re.findall(pattern2, text)
        global valin
        try:
            valin = [parse2[0], parse2[1]]
        except:
            valin = [parse2[0]]


# –û—Ç—Ä–∏–º—É—î–º–æ —á–∏—Å–ª–æ, —è–∫–µ —Ç—Ä–µ–±–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏
def return_num():
    global num
    return (float(num))


# –û—Ç—Ä–∏–º—É—î–º–æ –≤–∞–ª—é—Ç—É –≤ —è–∫—É –∞–±–æ –∑ —è–∫–æ—ó —Ç—Ä–µ–±–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏
def return_val():
    global valin
    try:
        a = valin[0] + valin[1]
    except:
        a = valin[0]
    return (str(a))


# –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å
def get_price(val):
    url = 'https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?valcode={}'.format(val) + '&date=' + today_date() + '&json'
    r = requests.get(url).json()
    rate = r[0]['rate']
    return float(rate)


# –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å –≤–∏–±—Ä–∞–Ω–æ—ó –≤–∞–ª—é—Ç–∏ –Ω–∞ –∑–∞–¥–∞–Ω—É –¥–∞—Ç—É
def get_archive_val(val,date):
    url = 'https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?valcode={}'.format(val) + '&date={}'.format(date) + '&json'
    r = requests.get(url).json()
    rate = r[0]['rate']
    return str(round(rate, 3))


# –û–±–º—ñ–Ω–Ω–∏–∫:
def fromua():
    c = (get_dict_val()).get(return_val())
    a = return_num() / float(get_price(c))
    b = (str(round(a, 2)) + ' ' + return_val())
    return str(b)


# –û—Ç—Ä–∏–º—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ —ñ–∑ –Ω–∞–∑–≤–∞–º–∏ —É—Å—ñ—Ö –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –∞–ø—ñ –ù–ë–£:
def get_dict_val():
    url = 'https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?date=' + today_date() + '&json'
    r = requests.get(url).json()

    def value(n):
        try:
            d = {r[n]['txt']: r[n]['cc']}
            return (d)
        except:
            return {}
    i = 0
    d = {}
    while i < 100:
        a = value(i)
        i += 1
        d.update(a)
    else:
        return d


# –í–∏–≤–æ–¥–∏–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —ñ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:
def keyboard(message, chat_id):
    val = get_dict_val()
    parse_text(message)

    # /start
    def start(chat_id):
        button = [['–û–±–º—ñ–Ω–Ω–∏–∫', '–ö—É—Ä—Å']]
        reply_markup = telegram.ReplyKeyboardMarkup(button, resize_keyboard=0, one_time_keyboard=False)
        bot.send_message(chat_id=chat_id, text="–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é: üí∏ ", reply_markup=reply_markup)

    # –ö–Ω–æ–ø–∫–∞ –æ–±–º—ñ–Ω
    def obmin(chat_id):
        button = [['–í–∞–ª—é—Ç—É', '–ì—Ä–∏–≤–Ω—é'], ['–ù–∞–∑–∞–¥']]
        reply_markup = telegram.ReplyKeyboardMarkup(button, resize_keyboard=0, one_time_keyboard=False)
        bot.send_message(chat_id=chat_id, text="–í–∏–±–µ—Ä—ñ—Ç—å —â–æ –æ–±–º—ñ–Ω—è—Ç–∏: üîÑ ", reply_markup=reply_markup)

    # –ö–Ω–æ–ø–∫–∞ –æ–±–º—ñ–Ω –≥—Ä–∏–≤–Ω—ñ
    def obmin_uah(chat_id):
        button = [['–î–æ–ª–∞—Ä –°–®–ê', '–Ñ–≤—Ä–æ', '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª—ñ–Ω–≥—ñ–≤', '–ó–ª–æ—Ç–∏–π'], ['–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏', '–ù–∞–∑–∞–¥']]
        reply_markup = telegram.ReplyKeyboardMarkup(button, resize_keyboard=0, one_time_keyboard=False)
        bot.send_message(chat_id=chat_id, text="–í–∏–±–µ—Ä—ñ—Ç—å –≤ —è–∫—É –≤–∞–ª—é—Ç—É: üî∞", reply_markup=reply_markup)

    #–ö–Ω–æ–ø–∫–∞ –æ–±–º—ñ–Ω –≤–∞–ª—é—Ç–∏
    def obmin_val1(chat_id):
        button = [['–î–æ–ª–∞—Ä –°–®–ê', '–Ñ–≤—Ä–æ', '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª—ñ–Ω–≥—ñ–≤', '–ó–ª–æ—Ç–∏–π'], ['–ù–∞–∑–∞–¥']]
        reply_markup = telegram.ReplyKeyboardMarkup(button, resize_keyboard=0, one_time_keyboard=False)
        bot.send_message(chat_id=chat_id, text="–í–∏–±–µ—Ä—ñ—Ç—å —è–∫—É –≤–∞–ª—é—Ç—É: üåê", reply_markup=reply_markup)

    #–ö–Ω–æ–ø–∫–∞ 2 –æ–±–º—ñ–Ω –≤–∞–ª—é—Ç–∏
    def obmin_val2(chat_id):
        button = [['–ì—Ä–∏–≤–Ω—è'],['–î–æ–ª–∞—Ä –°–®–ê', '–Ñ–≤—Ä–æ', '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª—ñ–Ω–≥—ñ–≤', '–ó–ª–æ—Ç–∏–π'], ['–ü–æ–≤—Ç–æ—Ä', '–ù–∞–∑–∞–¥']]
        reply_markup = telegram.ReplyKeyboardMarkup(button, resize_keyboard=0, one_time_keyboard=False)
        bot.send_message(chat_id=chat_id, text="–í–∏–±–µ—Ä—ñ—Ç—å –≤ —è–∫—É –≤–∞–ª—é—Ç—É: ‚è¨ ", reply_markup=reply_markup)

    # –ö–Ω–æ–ø–∫–∞ –∫—É—Ä—Å
    def kurs(chat_id):
        button = [['–î–æ–ª–∞—Ä –°–®–ê', '–Ñ–≤—Ä–æ', '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª—ñ–Ω–≥—ñ–≤', '–ó–ª–æ—Ç–∏–π'], ['–£—Å—è –≤–∞–ª—é—Ç–∞','–ê—Ä—Ö—ñ–≤',], [ '–ù–∞–∑–∞–¥']]
        reply_markup = telegram.ReplyKeyboardMarkup(button, resize_keyboard=0, one_time_keyboard=False)
        bot.send_message(chat_id=chat_id, text="–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É: üíµ ", reply_markup=reply_markup)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫—É—Ä—Å –≤–∏–±—Ä–∞–Ω–æ—ó –≤–∞–ª—é—Ç–∏
    def valuta(message, chat_id):
        a = val.get(message)
        b = (str(round((float(get_price(a))), 3)) + ' uah üá∫üá¶')
        send_message(chat_id, text=b)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –≤–∞–ª—é—Ç
    def all_valuta(chat_id):
        a = val.keys()
        b = "\n".join(map("".join, a))
        send_message(chat_id, text='–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–ª—é—Ç—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏: \n\n' + (b))

    # –ê—Ä—Ö—ñ–≤ –≤–∞–ª—é—Ç
    def ar_val(chat_id):
        button = [['–î–æ–ª–∞—Ä –°–®–ê', '–Ñ–≤—Ä–æ', '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª—ñ–Ω–≥—ñ–≤', '–ó–ª–æ—Ç–∏–π'], [ '–ù–∞–∑–∞–¥']]
        reply_markup = telegram.ReplyKeyboardMarkup(button, resize_keyboard=0, one_time_keyboard=False)
        bot.send_message(chat_id=chat_id, text="–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É: üíµ ", reply_markup=reply_markup)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≤–∏–∫–æ–Ω—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –¥—ñ—ó
    if message.lower() == '/start' or message.lower() == 'start':
        start(chat_id)
        mes_list.clear()

    elif message.lower() == '/help' or message.lower() == 'help':
        send_message(chat_id,text='–ë–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –∫—É—Ä—Å—É –≤–∞–ª—é—Çüí∞\n\n–í –º–µ–Ω—é "–û–±–º—ñ–Ω" –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≥—Ä–∏–≤–Ω—ñ –¥–æ —ñ–Ω—à–æ—ó –≤–∞–ª—é—Ç–∏ —ñ –Ω–∞–≤–ø–∞–∫–∏\n\n–í –º–µ–Ω—é "–ö—É—Ä—Å" –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –¥–∞—Ç—É, –∞ —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫—É—Ä—Å –Ω–∞ –≤–∏–±—Ä–∞–Ω—É –¥–∞—Ç—É(–ø—ñ–¥–º–µ–Ω—é "–ê—Ä—Ö—ñ–≤")\n\n–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start')

    elif message.lower() == '–Ω–∞–∑–∞–¥':
        start(chat_id)
        mes_list.clear()

    #–û–±—Ä–æ–±–ª—è—î–º–æ –∫—É—Ä—Å –≤–∞–ª—é—Ç
    elif message.lower() == '–∫—É—Ä—Å':
        kurs(chat_id)

    elif message.lower() == '–∞—Ä—Ö—ñ–≤' or message == '–©–µ —Ä–∞–∑' :
        ar_val(chat_id)

    elif mes_list[0] == '–ê—Ä—Ö—ñ–≤' or mes_list[0] == '–©–µ —Ä–∞–∑':
        if message in val:
            parse_text(message)
            reply_markup = telegram.ReplyKeyboardRemove()
            bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ: "–¥–µ–Ω—å –º—ñ—Å—è—Ü—å —Ä—ñ–∫" (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 29 03 2012): ‚¨áÔ∏è', reply_markup=reply_markup)

    elif mes_list[0] == '–ö—É—Ä—Å':
        if message in val:
            valuta(message, chat_id)

    elif message.lower() == '—É—Å—è –≤–∞–ª—é—Ç–∞':
        all_valuta(chat_id)

    elif mes_list[0] == '–£—Å—è –≤–∞–ª—é—Ç–∞':
        if message in val:
            parse_text(message)
            valuta(message, chat_id)

    #–û–±—Ä–æ–±–ª—è—î–º–æ –æ–±–º—ñ–Ω–Ω–∏–∫
    elif message.lower() == '–æ–±–º—ñ–Ω–Ω–∏–∫':
        obmin(chat_id)
        mes_list.clear()

    elif message.lower() == '–≤–∞–ª—é—Ç—É' or message == '–ü–æ–≤—Ç–æ—Ä':
        obmin_val1(chat_id)
        parse_text(message)

    #–ì—Ä–∏–≤–Ω—é
    elif message.lower() == '–≥—Ä–∏–≤–Ω—é' or message == '–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏':
        reply_markup = telegram.ReplyKeyboardRemove()
        bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è: ‚¨áÔ∏è', reply_markup=reply_markup)

    elif mes_list[0] == '–ì—Ä–∏–≤–Ω—é' or mes_list[0] == '–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏':
        obmin_uah(chat_id)
        parse_text(message)

    elif mes_list[1] == '–ì—Ä–∏–≤–Ω—é' or mes_list[1] == '–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏':
        parse_text(message)
        a = fromua()
        b = str(return_num()) + ' –ì—Ä–Ω üá∫üá¶' + ' = ' + str(a) + ' ‚úÖÔ∏è'
        send_message(chat_id, b)
        mes_list.clear()

    #–í–∞–ª—é—Ç—É
    elif mes_list[0] == '–í–∞–ª—é—Ç—É' or mes_list[0] == '–ü–æ–≤—Ç–æ—Ä':
        c = (get_dict_val()).get(return_val())
        global valfrom
        valfrom = get_price(c)
        reply_markup = telegram.ReplyKeyboardRemove()
        bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è: ‚¨áÔ∏è', reply_markup=reply_markup)

    elif mes_list[1] == '–í–∞–ª—é—Ç—É' or mes_list[1] == '–ü–æ–≤—Ç–æ—Ä':
        obmin_val2(chat_id)

    elif mes_list[2] == '–í–∞–ª—é—Ç—É' or mes_list[2] == '–ü–æ–≤—Ç–æ—Ä':
        if message == '–ì—Ä–∏–≤–Ω—è':
            a = round((float(return_num())*float(valfrom)), 3)
            b =  str(return_num()) + ' ' + str(mes_list[1]) + ' üíé ' + ' = ' + str(a) + ' –≥—Ä–Ω üá∫üá¶'
            send_message(chat_id, text=b)
        else:
            a = (get_dict_val()).get(return_val())
            b = round((float(return_num())*float(valfrom)/float(get_price(a))), 3)
            c = str(mes_list[0]) + ' ' + str(mes_list[1])+' üîΩ ' + ' = ' + str(b) + ' ' + message + ' üîº'
            send_message(chat_id, text=c)

    #–û–±—Ä–æ–±–ª—è—î–º–æ –∞—Ä—Ö—ñ–≤
    elif mes_list[1] == '–ê—Ä—Ö—ñ–≤' or mes_list[1] == '–©–µ —Ä–∞–∑':
        pattern = r'\d+'
        parse = re.findall(pattern, message)
        a = parse[2] + parse[1] + parse[0]
        b = val.get(return_val())
        c = get_archive_val(b,str(int(a)))
        d = mes_list[0] + ' –Ω–∞ –∑–∞–¥–∞–Ω—É –¥–∞—Ç—É –∫–æ—à—Ç—É–≤–∞–≤: ' + c + ' –≥—Ä–Ω üóí'
        button = [['–©–µ —Ä–∞–∑'], ['–ù–∞–∑–∞–¥']]
        reply_markup = telegram.ReplyKeyboardMarkup(button, resize_keyboard=0, one_time_keyboard=False)
        bot.send_message(chat_id=chat_id, text=d ,reply_markup=reply_markup)
        mes_list.clear()

    elif mes_list[0] in val:
        valuta(message, chat_id)


@app.route('/', methods=['POST', 'GET'])
def index():
    if request.method == 'POST':
        r = request.get_json()
        chat_id = r['message']['chat']['id']
        # write_json(r)
        try:
            message = r['message']['text']
            keyboard(message, chat_id)
            global mes_list
            mes_list.insert(0, message)
        except:
            button = [['–û–±–º—ñ–Ω–Ω–∏–∫', '–ö—É—Ä—Å']]
            reply_markup = telegram.ReplyKeyboardMarkup(button, resize_keyboard=0, one_time_keyboard=False)
            bot.send_message(chat_id=chat_id, text="Wrong data ! üö´ ", reply_markup=reply_markup)

    return '<h1> It works!  You`re welcome! </h1>'


if __name__ == '__main__':
    app.run()
